@{
    ViewData["Title"] = "Home";
    Layout = "_Layout";
}

<header class="hero-section">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="fw-bold text-white display-4">Egyptian Rooms</h1>
                <p class="text-light fs-5">
                    Find and book the best rooms in Egypt.
                </p>
            </div>
            <div class="col-lg-6">
                <div class="search-box p-4 shadow-lg bg-white rounded">
                    <h4 class="fw-bold text-dark">Search for Rooms</h4>
                    <form id="searchForm">
                        <div class="mb-3">
                            <label class="form-label">Governorate</label>
                            <select id="governorateSelect" class="form-control form-control-lg" required>
                                <option value="">Select Governorate</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">District</label>
                            <select id="districtSelect" class="form-control form-control-lg" disabled>
                                <option value="0">Select District (Optional)</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Select Dates</label>
                            <div class="d-flex">
                                <div class="me-3">
                                    <input type="date" id="checkin" name="start" class="form-control" required>
                                </div>
                                <div>
                                    <input type="date" id="checkout" name="end" class="form-control" required>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Guests</label>
                            <input type="number" id="guests" class="form-control form-control-lg" min="1" value="1" required>
                        </div>
                        <button type="submit" class="btn btn-warning btn-lg w-100">Search</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- 🏨 Rooms Section -->
<section class="rooms-section" id="availableRoomsSection">
    <div class="container">
        <h2 class="text-center fw-bold mb-4">Available Egyptian Rooms</h2>
        <div class="row" id="roomResults">
            <!-- Search results will be loaded here -->
        </div>
    </div>
</section>

@section Scripts {
    <script>
        // Initialize event listeners when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function () {
            loadGovernorates();

            const governorateSelect = document.getElementById('governorateSelect');
            const districtSelect = document.getElementById('districtSelect');
            const searchForm = document.getElementById('searchForm');
            const checkinInput = document.getElementById('checkin');
            const checkoutInput = document.getElementById('checkout');

            // Set minimum date to today for check-in
            const today = new Date().toISOString().split('T')[0];
            checkinInput.min = today;
            checkinInput.value = today;

            // Set minimum date for checkout to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            checkoutInput.min = tomorrow.toISOString().split('T')[0];
            checkoutInput.value = tomorrow.toISOString().split('T')[0];

            // Ensure checkout date cannot be before checkin
            checkinInput.addEventListener('change', function () {
                const newMinCheckout = new Date(checkinInput.value);
                newMinCheckout.setDate(newMinCheckout.getDate() + 1);
                checkoutInput.min = newMinCheckout.toISOString().split('T')[0];

                // If current checkout date is before new minimum, update it
                if (new Date(checkoutInput.value) <= new Date(checkinInput.value)) {
                    checkoutInput.value = newMinCheckout.toISOString().split('T')[0];
                }
            });

            // Enable and load districts when a governorate is selected
            governorateSelect.addEventListener('change', function () {
                const governorateId = governorateSelect.value;
                loadDistricts(governorateId);
                districtSelect.disabled = (governorateId === "");
            });

            // Handle form submission
            searchForm.addEventListener('submit', function (e) {
                e.preventDefault();
                if (validateDates()) {
                    checkUserLoginAndSearch();
                }
            });
        });

        // Check if user is logged in before searching
        function checkUserLoginAndSearch() {
            fetch('/Account/IsUserLoggedIn')
                .then(response => response.json())
                .then(data => {
                    if (data.isLoggedIn) {
                        searchRooms();
                    } else {
                        // Redirect to login page with return URL
                        window.location.href = '/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname + window.location.search);
                    }
                })
                .catch(error => {
                    console.error('Error checking login status:', error);
                    // Default to redirecting to login if there's an error
                    window.location.href = '/Account/Login';
                });
        }

        // Load governorates using Fetch API
        function loadGovernorates() {
            fetch('/home/GetGovernorates')
                .then(response => response.json())
                .then(data => {
                    const governorateSelect = document.getElementById('governorateSelect');
                    data.forEach(g => {
                        const option = document.createElement('option');
                        option.value = g.id;
                        option.textContent = g.name;
                        governorateSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading governorates:', error));
        }

        // Load districts based on the selected governorate
        function loadDistricts(governorateId) {
            const districtSelect = document.getElementById('districtSelect');
            districtSelect.innerHTML = '<option value="0">Select District (Optional)</option>';
            if (!governorateId) return;
            fetch(`/Home/GetDistricts?governorateId=${governorateId}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(d => {
                        const option = document.createElement('option');
                        option.value = d.id;
                        option.textContent = d.name;
                        districtSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading districts:', error));
        }

        // Perform the search for rooms
        function searchRooms() {
            const startInput = document.getElementById('checkin').value;
            const endInput = document.getElementById('checkout').value;
            // If no district is selected, default to "0"
            const districtValue = document.getElementById('districtSelect').value || "0";
            const searchData = {
                GovernorateId: document.getElementById('governorateSelect').value,
                DistrictId: districtValue,
                CheckIn: startInput,
                CheckOut: endInput,
                Guests: document.getElementById('guests').value
            };

            fetch('/room/GetAvailableRooms', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(searchData)
            })
                .then(response => response.json())
                .then(rooms => {
                    const roomResults = document.getElementById('roomResults');
                    roomResults.innerHTML = '';
                    if (!rooms || rooms.length === 0) {
                        roomResults.innerHTML = '<div class="col-12 text-center text-danger fw-bold fs-4">No available rooms</div>';
                    } else {
                        rooms.forEach(room => {
                            const colDiv = document.createElement('div');
                            colDiv.className = 'col-md-4';
                            colDiv.innerHTML = `
                                            <div class="room-card">
                                                <img src="${room.imageUrl ? room.imageUrl : 'default-room.jpg'}" alt="Room" class="room-img img-fluid">
                                                <div class="room-details p-2">
                                                    <h5 class="fw-bold">${room.name ? room.name : 'Unnamed Room'}</h5>
                                                    <p>Price: ${room.price ? room.price + ' EGP' : 'N/A'}</p>
                                                    <a href="#" class="btn btn-warning w-100">Book Now</a>
                                                </div>
                                            </div>
                                        `;
                            roomResults.appendChild(colDiv);
                        });
                    }
                    // Smooth scroll to the rooms section
                    document.getElementById('availableRoomsSection').scrollIntoView({ behavior: 'smooth' });
                })
                .catch(error => {
                    console.error('Error fetching rooms:', error);
                    document.getElementById('roomResults').innerHTML = '<div class="col-12 text-center text-danger fw-bold fs-4">No Units available for this search!</div>';
                });
        }

        // Validate that the checkout date is after the checkin date
        function validateDates() {
            const checkIn = new Date(document.getElementById('checkin').value);
            const checkOut = new Date(document.getElementById('checkout').value);
            if (checkOut <= checkIn) {
                alert('Check-out date must be after check-in date.');
                return false;
            }
            return true;
        }
    </script>
}

@section style {
    <style>
        /* Custom styles for native date inputs */
        input[type="date"] {
            background-color: #f3f4f6;
            border-color: #d1d5db;
        }

            input[type="date"]:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
            }
    </style>
}